#Hyperparameters 

The code NN_network2.py has 3 cost functions, 4 activation functions, 2 regularization, and dropout rate. The hyper-parameters 
are passed in through keywords in the constructor/init, and the values are stored in the (additional) instance variables.

-Arguments: 

1) Cost:
- This parameter specifies the cost function.
- Parameter options are 'QuadraticCost', 'CrossEntropy', 'LogLikelihood'.
- Each one must be implemented as a class.
- The class should have two static functions: fn() executes the definition of the function to compute the cost in during evaluation,
and derivative() executes the function's derivative to compute the error during learning.
-Both functions receive a (activation) and y (target output), which are from one data instance and 
represented by column vectors.
- Fn() returns a scalar, while derivative() returns a column vector containing the cost derivative for each node in the output layer; 
no multiplication by the derivative of the activation function.
